// Code generated by protoc-gen-gogo.
// source: binlog.proto
// DO NOT EDIT!

/*
Package mysql is a generated protocol buffer package.

It is generated from these files:
	binlog.proto
	error_code.proto

It has these top-level messages:
	LogEventType
	RowsEventVersion
	ChecksumAlgorithm
	QueryStatusCode
	SqlMode
	FieldType
*/
package mysql

import proto "github.com/gogo/protobuf/proto"
import math "math"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type LogEventType_Type int32

const (
	LogEventType_UNKNOWN_EVENT            LogEventType_Type = 0
	LogEventType_START_EVENT_V3           LogEventType_Type = 1
	LogEventType_QUERY_EVENT              LogEventType_Type = 2
	LogEventType_STOP_EVENT               LogEventType_Type = 3
	LogEventType_ROTATE_EVENT             LogEventType_Type = 4
	LogEventType_INTVAR_EVENT             LogEventType_Type = 5
	LogEventType_LOAD_EVENT               LogEventType_Type = 6
	LogEventType_SLAVE_EVENT              LogEventType_Type = 7
	LogEventType_CREATE_FILE_EVENT        LogEventType_Type = 8
	LogEventType_APPEND_BLOCK_EVENT       LogEventType_Type = 9
	LogEventType_EXEC_LOAD_EVENT          LogEventType_Type = 10
	LogEventType_DELETE_FILE_EVENT        LogEventType_Type = 11
	LogEventType_NEW_LOAD_EVENT           LogEventType_Type = 12
	LogEventType_RAND_EVENT               LogEventType_Type = 13
	LogEventType_USER_VAR_EVENT           LogEventType_Type = 14
	LogEventType_FORMAT_DESCRIPTION_EVENT LogEventType_Type = 15
	LogEventType_XID_EVENT                LogEventType_Type = 16
	LogEventType_BEGIN_LOAD_QUERY_EVENT   LogEventType_Type = 17
	LogEventType_EXECUTE_LOAD_QUERY_EVENT LogEventType_Type = 18
	LogEventType_TABLE_MAP_EVENT          LogEventType_Type = 19
	LogEventType_PRE_GA_WRITE_ROWS_EVENT  LogEventType_Type = 20
	LogEventType_PRE_GA_UPDATE_ROWS_EVENT LogEventType_Type = 21
	LogEventType_PRE_GA_DELETE_ROWS_EVENT LogEventType_Type = 22
	LogEventType_WRITE_ROWS_EVENT_V1      LogEventType_Type = 23
	LogEventType_UPDATE_ROWS_EVENT_V1     LogEventType_Type = 24
	LogEventType_DELETE_ROWS_EVENT_V1     LogEventType_Type = 25
	LogEventType_INCIDENT_EVENT           LogEventType_Type = 26
	LogEventType_HEARTBEAT_LOG_EVENT      LogEventType_Type = 27
	LogEventType_IGNORABLE_LOG_EVENT      LogEventType_Type = 28
	LogEventType_ROWS_QUERY_LOG_EVENT     LogEventType_Type = 29
	LogEventType_WRITE_ROWS_EVENT         LogEventType_Type = 30
	LogEventType_UPDATE_ROWS_EVENT        LogEventType_Type = 31
	LogEventType_DELETE_ROWS_EVENT        LogEventType_Type = 32
	LogEventType_GTID_LOG_EVENT           LogEventType_Type = 33
	LogEventType_ANONYMOUS_GTID_LOG_EVENT LogEventType_Type = 34
	LogEventType_PREVIOUS_GTIDS_LOG_EVENT LogEventType_Type = 35
)

var LogEventType_Type_name = map[int32]string{
	0:  "UNKNOWN_EVENT",
	1:  "START_EVENT_V3",
	2:  "QUERY_EVENT",
	3:  "STOP_EVENT",
	4:  "ROTATE_EVENT",
	5:  "INTVAR_EVENT",
	6:  "LOAD_EVENT",
	7:  "SLAVE_EVENT",
	8:  "CREATE_FILE_EVENT",
	9:  "APPEND_BLOCK_EVENT",
	10: "EXEC_LOAD_EVENT",
	11: "DELETE_FILE_EVENT",
	12: "NEW_LOAD_EVENT",
	13: "RAND_EVENT",
	14: "USER_VAR_EVENT",
	15: "FORMAT_DESCRIPTION_EVENT",
	16: "XID_EVENT",
	17: "BEGIN_LOAD_QUERY_EVENT",
	18: "EXECUTE_LOAD_QUERY_EVENT",
	19: "TABLE_MAP_EVENT",
	20: "PRE_GA_WRITE_ROWS_EVENT",
	21: "PRE_GA_UPDATE_ROWS_EVENT",
	22: "PRE_GA_DELETE_ROWS_EVENT",
	23: "WRITE_ROWS_EVENT_V1",
	24: "UPDATE_ROWS_EVENT_V1",
	25: "DELETE_ROWS_EVENT_V1",
	26: "INCIDENT_EVENT",
	27: "HEARTBEAT_LOG_EVENT",
	28: "IGNORABLE_LOG_EVENT",
	29: "ROWS_QUERY_LOG_EVENT",
	30: "WRITE_ROWS_EVENT",
	31: "UPDATE_ROWS_EVENT",
	32: "DELETE_ROWS_EVENT",
	33: "GTID_LOG_EVENT",
	34: "ANONYMOUS_GTID_LOG_EVENT",
	35: "PREVIOUS_GTIDS_LOG_EVENT",
}
var LogEventType_Type_value = map[string]int32{
	"UNKNOWN_EVENT":            0,
	"START_EVENT_V3":           1,
	"QUERY_EVENT":              2,
	"STOP_EVENT":               3,
	"ROTATE_EVENT":             4,
	"INTVAR_EVENT":             5,
	"LOAD_EVENT":               6,
	"SLAVE_EVENT":              7,
	"CREATE_FILE_EVENT":        8,
	"APPEND_BLOCK_EVENT":       9,
	"EXEC_LOAD_EVENT":          10,
	"DELETE_FILE_EVENT":        11,
	"NEW_LOAD_EVENT":           12,
	"RAND_EVENT":               13,
	"USER_VAR_EVENT":           14,
	"FORMAT_DESCRIPTION_EVENT": 15,
	"XID_EVENT":                16,
	"BEGIN_LOAD_QUERY_EVENT":   17,
	"EXECUTE_LOAD_QUERY_EVENT": 18,
	"TABLE_MAP_EVENT":          19,
	"PRE_GA_WRITE_ROWS_EVENT":  20,
	"PRE_GA_UPDATE_ROWS_EVENT": 21,
	"PRE_GA_DELETE_ROWS_EVENT": 22,
	"WRITE_ROWS_EVENT_V1":      23,
	"UPDATE_ROWS_EVENT_V1":     24,
	"DELETE_ROWS_EVENT_V1":     25,
	"INCIDENT_EVENT":           26,
	"HEARTBEAT_LOG_EVENT":      27,
	"IGNORABLE_LOG_EVENT":      28,
	"ROWS_QUERY_LOG_EVENT":     29,
	"WRITE_ROWS_EVENT":         30,
	"UPDATE_ROWS_EVENT":        31,
	"DELETE_ROWS_EVENT":        32,
	"GTID_LOG_EVENT":           33,
	"ANONYMOUS_GTID_LOG_EVENT": 34,
	"PREVIOUS_GTIDS_LOG_EVENT": 35,
}

func (x LogEventType_Type) Enum() *LogEventType_Type {
	p := new(LogEventType_Type)
	*p = x
	return p
}
func (x LogEventType_Type) String() string {
	return proto.EnumName(LogEventType_Type_name, int32(x))
}
func (x *LogEventType_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LogEventType_Type_value, data, "LogEventType_Type")
	if err != nil {
		return err
	}
	*x = LogEventType_Type(value)
	return nil
}

type RowsEventVersion_Type int32

const (
	RowsEventVersion_V2 RowsEventVersion_Type = 1
	RowsEventVersion_V1 RowsEventVersion_Type = 0
)

var RowsEventVersion_Type_name = map[int32]string{
	1: "V2",
	0: "V1",
}
var RowsEventVersion_Type_value = map[string]int32{
	"V2": 1,
	"V1": 0,
}

func (x RowsEventVersion_Type) Enum() *RowsEventVersion_Type {
	p := new(RowsEventVersion_Type)
	*p = x
	return p
}
func (x RowsEventVersion_Type) String() string {
	return proto.EnumName(RowsEventVersion_Type_name, int32(x))
}
func (x *RowsEventVersion_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RowsEventVersion_Type_value, data, "RowsEventVersion_Type")
	if err != nil {
		return err
	}
	*x = RowsEventVersion_Type(value)
	return nil
}

type ChecksumAlgorithm_Type int32

const (
	ChecksumAlgorithm_OFF       ChecksumAlgorithm_Type = 0
	ChecksumAlgorithm_CRC32     ChecksumAlgorithm_Type = 1
	ChecksumAlgorithm_UNDEFINED ChecksumAlgorithm_Type = 255
)

var ChecksumAlgorithm_Type_name = map[int32]string{
	0:   "OFF",
	1:   "CRC32",
	255: "UNDEFINED",
}
var ChecksumAlgorithm_Type_value = map[string]int32{
	"OFF":       0,
	"CRC32":     1,
	"UNDEFINED": 255,
}

func (x ChecksumAlgorithm_Type) Enum() *ChecksumAlgorithm_Type {
	p := new(ChecksumAlgorithm_Type)
	*p = x
	return p
}
func (x ChecksumAlgorithm_Type) String() string {
	return proto.EnumName(ChecksumAlgorithm_Type_name, int32(x))
}
func (x *ChecksumAlgorithm_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ChecksumAlgorithm_Type_value, data, "ChecksumAlgorithm_Type")
	if err != nil {
		return err
	}
	*x = ChecksumAlgorithm_Type(value)
	return nil
}

type QueryStatusCode_Type int32

const (
	QueryStatusCode_FLAGS2               QueryStatusCode_Type = 0
	QueryStatusCode_SQL_MODE             QueryStatusCode_Type = 1
	QueryStatusCode_CATALOG              QueryStatusCode_Type = 2
	QueryStatusCode_AUTO_INCREMENT       QueryStatusCode_Type = 3
	QueryStatusCode_CHARSET              QueryStatusCode_Type = 4
	QueryStatusCode_TIME_ZONE            QueryStatusCode_Type = 5
	QueryStatusCode_CATALOG_NZ           QueryStatusCode_Type = 6
	QueryStatusCode_LC_TIME_NAMES        QueryStatusCode_Type = 7
	QueryStatusCode_CHARSET_DATABASE     QueryStatusCode_Type = 8
	QueryStatusCode_TABLE_MAP_FOR_UPDATE QueryStatusCode_Type = 9
	QueryStatusCode_MASTER_DATA_WRITTEN  QueryStatusCode_Type = 10
	QueryStatusCode_INVOKER              QueryStatusCode_Type = 11
	QueryStatusCode_UPDATED_DB_NAMES     QueryStatusCode_Type = 12
	QueryStatusCode_MICROSECONDS         QueryStatusCode_Type = 13
)

var QueryStatusCode_Type_name = map[int32]string{
	0:  "FLAGS2",
	1:  "SQL_MODE",
	2:  "CATALOG",
	3:  "AUTO_INCREMENT",
	4:  "CHARSET",
	5:  "TIME_ZONE",
	6:  "CATALOG_NZ",
	7:  "LC_TIME_NAMES",
	8:  "CHARSET_DATABASE",
	9:  "TABLE_MAP_FOR_UPDATE",
	10: "MASTER_DATA_WRITTEN",
	11: "INVOKER",
	12: "UPDATED_DB_NAMES",
	13: "MICROSECONDS",
}
var QueryStatusCode_Type_value = map[string]int32{
	"FLAGS2":               0,
	"SQL_MODE":             1,
	"CATALOG":              2,
	"AUTO_INCREMENT":       3,
	"CHARSET":              4,
	"TIME_ZONE":            5,
	"CATALOG_NZ":           6,
	"LC_TIME_NAMES":        7,
	"CHARSET_DATABASE":     8,
	"TABLE_MAP_FOR_UPDATE": 9,
	"MASTER_DATA_WRITTEN":  10,
	"INVOKER":              11,
	"UPDATED_DB_NAMES":     12,
	"MICROSECONDS":         13,
}

func (x QueryStatusCode_Type) Enum() *QueryStatusCode_Type {
	p := new(QueryStatusCode_Type)
	*p = x
	return p
}
func (x QueryStatusCode_Type) String() string {
	return proto.EnumName(QueryStatusCode_Type_name, int32(x))
}
func (x *QueryStatusCode_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QueryStatusCode_Type_value, data, "QueryStatusCode_Type")
	if err != nil {
		return err
	}
	*x = QueryStatusCode_Type(value)
	return nil
}

type SqlMode_BitPosition int32

const (
	SqlMode_REAL_AS_FLOAT              SqlMode_BitPosition = 0
	SqlMode_PIPES_AS_CONCAT            SqlMode_BitPosition = 1
	SqlMode_ANSI_QUOTES                SqlMode_BitPosition = 2
	SqlMode_IGNORE_SPACE               SqlMode_BitPosition = 3
	SqlMode_NOT_USED                   SqlMode_BitPosition = 4
	SqlMode_ONLY_FULL_GROUP_BY         SqlMode_BitPosition = 5
	SqlMode_NO_UNSIGNED_SUBTRACTION    SqlMode_BitPosition = 6
	SqlMode_NO_DIR_IN_CREATE           SqlMode_BitPosition = 7
	SqlMode_POSTGRESQL                 SqlMode_BitPosition = 8
	SqlMode_ORACLE                     SqlMode_BitPosition = 9
	SqlMode_MSSQL                      SqlMode_BitPosition = 10
	SqlMode_DB2                        SqlMode_BitPosition = 11
	SqlMode_MAXDB                      SqlMode_BitPosition = 12
	SqlMode_NO_KEY_OPTIONS             SqlMode_BitPosition = 13
	SqlMode_NO_TABLE_OPTIONS           SqlMode_BitPosition = 14
	SqlMode_NO_FIELD_OPTIONS           SqlMode_BitPosition = 15
	SqlMode_MYSQL323                   SqlMode_BitPosition = 16
	SqlMode_MYSQL40                    SqlMode_BitPosition = 17
	SqlMode_ANSI                       SqlMode_BitPosition = 18
	SqlMode_NO_AUTO_VALUE_ON_ZERO      SqlMode_BitPosition = 19
	SqlMode_NO_BACKSLASH_ESCAPES       SqlMode_BitPosition = 20
	SqlMode_STRICT_TRANS_TABLES        SqlMode_BitPosition = 21
	SqlMode_STRICT_ALL_TABLES          SqlMode_BitPosition = 22
	SqlMode_NO_ZERO_IN_DATE            SqlMode_BitPosition = 23
	SqlMode_NO_ZERO_DATE               SqlMode_BitPosition = 24
	SqlMode_INVALID_DATES              SqlMode_BitPosition = 25
	SqlMode_ERROR_FOR_DIVISION_BY_ZERO SqlMode_BitPosition = 26
	SqlMode_TRADITIONAL                SqlMode_BitPosition = 27
	SqlMode_NO_AUTO_CREATE_USER        SqlMode_BitPosition = 28
	SqlMode_HIGH_NOT_PRECEDENCE        SqlMode_BitPosition = 29
	SqlMode_NO_ENGINE_SUBSTITUTION     SqlMode_BitPosition = 30
	SqlMode_PAD_CHAR_TO_FULL_LENGTH    SqlMode_BitPosition = 31
)

var SqlMode_BitPosition_name = map[int32]string{
	0:  "REAL_AS_FLOAT",
	1:  "PIPES_AS_CONCAT",
	2:  "ANSI_QUOTES",
	3:  "IGNORE_SPACE",
	4:  "NOT_USED",
	5:  "ONLY_FULL_GROUP_BY",
	6:  "NO_UNSIGNED_SUBTRACTION",
	7:  "NO_DIR_IN_CREATE",
	8:  "POSTGRESQL",
	9:  "ORACLE",
	10: "MSSQL",
	11: "DB2",
	12: "MAXDB",
	13: "NO_KEY_OPTIONS",
	14: "NO_TABLE_OPTIONS",
	15: "NO_FIELD_OPTIONS",
	16: "MYSQL323",
	17: "MYSQL40",
	18: "ANSI",
	19: "NO_AUTO_VALUE_ON_ZERO",
	20: "NO_BACKSLASH_ESCAPES",
	21: "STRICT_TRANS_TABLES",
	22: "STRICT_ALL_TABLES",
	23: "NO_ZERO_IN_DATE",
	24: "NO_ZERO_DATE",
	25: "INVALID_DATES",
	26: "ERROR_FOR_DIVISION_BY_ZERO",
	27: "TRADITIONAL",
	28: "NO_AUTO_CREATE_USER",
	29: "HIGH_NOT_PRECEDENCE",
	30: "NO_ENGINE_SUBSTITUTION",
	31: "PAD_CHAR_TO_FULL_LENGTH",
}
var SqlMode_BitPosition_value = map[string]int32{
	"REAL_AS_FLOAT":              0,
	"PIPES_AS_CONCAT":            1,
	"ANSI_QUOTES":                2,
	"IGNORE_SPACE":               3,
	"NOT_USED":                   4,
	"ONLY_FULL_GROUP_BY":         5,
	"NO_UNSIGNED_SUBTRACTION":    6,
	"NO_DIR_IN_CREATE":           7,
	"POSTGRESQL":                 8,
	"ORACLE":                     9,
	"MSSQL":                      10,
	"DB2":                        11,
	"MAXDB":                      12,
	"NO_KEY_OPTIONS":             13,
	"NO_TABLE_OPTIONS":           14,
	"NO_FIELD_OPTIONS":           15,
	"MYSQL323":                   16,
	"MYSQL40":                    17,
	"ANSI":                       18,
	"NO_AUTO_VALUE_ON_ZERO":      19,
	"NO_BACKSLASH_ESCAPES":       20,
	"STRICT_TRANS_TABLES":        21,
	"STRICT_ALL_TABLES":          22,
	"NO_ZERO_IN_DATE":            23,
	"NO_ZERO_DATE":               24,
	"INVALID_DATES":              25,
	"ERROR_FOR_DIVISION_BY_ZERO": 26,
	"TRADITIONAL":                27,
	"NO_AUTO_CREATE_USER":        28,
	"HIGH_NOT_PRECEDENCE":        29,
	"NO_ENGINE_SUBSTITUTION":     30,
	"PAD_CHAR_TO_FULL_LENGTH":    31,
}

func (x SqlMode_BitPosition) Enum() *SqlMode_BitPosition {
	p := new(SqlMode_BitPosition)
	*p = x
	return p
}
func (x SqlMode_BitPosition) String() string {
	return proto.EnumName(SqlMode_BitPosition_name, int32(x))
}
func (x *SqlMode_BitPosition) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SqlMode_BitPosition_value, data, "SqlMode_BitPosition")
	if err != nil {
		return err
	}
	*x = SqlMode_BitPosition(value)
	return nil
}

type FieldType_Type int32

const (
	FieldType_DECIMAL     FieldType_Type = 0
	FieldType_TINY        FieldType_Type = 1
	FieldType_SHORT       FieldType_Type = 2
	FieldType_LONG        FieldType_Type = 3
	FieldType_FLOAT       FieldType_Type = 4
	FieldType_DOUBLE      FieldType_Type = 5
	FieldType_NULL        FieldType_Type = 6
	FieldType_TIMESTAMP   FieldType_Type = 7
	FieldType_LONGLONG    FieldType_Type = 8
	FieldType_INT24       FieldType_Type = 9
	FieldType_DATE        FieldType_Type = 10
	FieldType_TIME        FieldType_Type = 11
	FieldType_DATETIME    FieldType_Type = 12
	FieldType_YEAR        FieldType_Type = 13
	FieldType_NEWDATE     FieldType_Type = 14
	FieldType_VARCHAR     FieldType_Type = 15
	FieldType_BIT         FieldType_Type = 16
	FieldType_TIMESTAMP2  FieldType_Type = 17
	FieldType_DATETIME2   FieldType_Type = 18
	FieldType_TIME2       FieldType_Type = 19
	FieldType_NEWDECIMAL  FieldType_Type = 246
	FieldType_ENUM        FieldType_Type = 247
	FieldType_SET         FieldType_Type = 248
	FieldType_TINY_BLOB   FieldType_Type = 249
	FieldType_MEDIUM_BLOB FieldType_Type = 250
	FieldType_LONG_BLOB   FieldType_Type = 251
	FieldType_BLOB        FieldType_Type = 252
	FieldType_VAR_STRING  FieldType_Type = 253
	FieldType_STRING      FieldType_Type = 254
	FieldType_GEOMETRY    FieldType_Type = 255
)

var FieldType_Type_name = map[int32]string{
	0:   "DECIMAL",
	1:   "TINY",
	2:   "SHORT",
	3:   "LONG",
	4:   "FLOAT",
	5:   "DOUBLE",
	6:   "NULL",
	7:   "TIMESTAMP",
	8:   "LONGLONG",
	9:   "INT24",
	10:  "DATE",
	11:  "TIME",
	12:  "DATETIME",
	13:  "YEAR",
	14:  "NEWDATE",
	15:  "VARCHAR",
	16:  "BIT",
	17:  "TIMESTAMP2",
	18:  "DATETIME2",
	19:  "TIME2",
	246: "NEWDECIMAL",
	247: "ENUM",
	248: "SET",
	249: "TINY_BLOB",
	250: "MEDIUM_BLOB",
	251: "LONG_BLOB",
	252: "BLOB",
	253: "VAR_STRING",
	254: "STRING",
	255: "GEOMETRY",
}
var FieldType_Type_value = map[string]int32{
	"DECIMAL":     0,
	"TINY":        1,
	"SHORT":       2,
	"LONG":        3,
	"FLOAT":       4,
	"DOUBLE":      5,
	"NULL":        6,
	"TIMESTAMP":   7,
	"LONGLONG":    8,
	"INT24":       9,
	"DATE":        10,
	"TIME":        11,
	"DATETIME":    12,
	"YEAR":        13,
	"NEWDATE":     14,
	"VARCHAR":     15,
	"BIT":         16,
	"TIMESTAMP2":  17,
	"DATETIME2":   18,
	"TIME2":       19,
	"NEWDECIMAL":  246,
	"ENUM":        247,
	"SET":         248,
	"TINY_BLOB":   249,
	"MEDIUM_BLOB": 250,
	"LONG_BLOB":   251,
	"BLOB":        252,
	"VAR_STRING":  253,
	"STRING":      254,
	"GEOMETRY":    255,
}

func (x FieldType_Type) Enum() *FieldType_Type {
	p := new(FieldType_Type)
	*p = x
	return p
}
func (x FieldType_Type) String() string {
	return proto.EnumName(FieldType_Type_name, int32(x))
}
func (x *FieldType_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FieldType_Type_value, data, "FieldType_Type")
	if err != nil {
		return err
	}
	*x = FieldType_Type(value)
	return nil
}

// See sql/log_event.h for details.
type LogEventType struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *LogEventType) Reset()         { *m = LogEventType{} }
func (m *LogEventType) String() string { return proto.CompactTextString(m) }
func (*LogEventType) ProtoMessage()    {}

type RowsEventVersion struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RowsEventVersion) Reset()         { *m = RowsEventVersion{} }
func (m *RowsEventVersion) String() string { return proto.CompactTextString(m) }
func (*RowsEventVersion) ProtoMessage()    {}

type ChecksumAlgorithm struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChecksumAlgorithm) Reset()         { *m = ChecksumAlgorithm{} }
func (m *ChecksumAlgorithm) String() string { return proto.CompactTextString(m) }
func (*ChecksumAlgorithm) ProtoMessage()    {}

// This is equivalent to Q_<name>(_CODE)? in log_event.h
type QueryStatusCode struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *QueryStatusCode) Reset()         { *m = QueryStatusCode{} }
func (m *QueryStatusCode) String() string { return proto.CompactTextString(m) }
func (*QueryStatusCode) ProtoMessage()    {}

// This is equivalent to MODE_<name> in sql_class.h.  Note that these are
// bit positions.
type SqlMode struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SqlMode) Reset()         { *m = SqlMode{} }
func (m *SqlMode) String() string { return proto.CompactTextString(m) }
func (*SqlMode) ProtoMessage()    {}

type FieldType struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *FieldType) Reset()         { *m = FieldType{} }
func (m *FieldType) String() string { return proto.CompactTextString(m) }
func (*FieldType) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("mysql.LogEventType_Type", LogEventType_Type_name, LogEventType_Type_value)
	proto.RegisterEnum("mysql.RowsEventVersion_Type", RowsEventVersion_Type_name, RowsEventVersion_Type_value)
	proto.RegisterEnum("mysql.ChecksumAlgorithm_Type", ChecksumAlgorithm_Type_name, ChecksumAlgorithm_Type_value)
	proto.RegisterEnum("mysql.QueryStatusCode_Type", QueryStatusCode_Type_name, QueryStatusCode_Type_value)
	proto.RegisterEnum("mysql.SqlMode_BitPosition", SqlMode_BitPosition_name, SqlMode_BitPosition_value)
	proto.RegisterEnum("mysql.FieldType_Type", FieldType_Type_name, FieldType_Type_value)
}
func (m *LogEventType) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		switch fieldNum {
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *RowsEventVersion) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		switch fieldNum {
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *ChecksumAlgorithm) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		switch fieldNum {
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *QueryStatusCode) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		switch fieldNum {
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *SqlMode) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		switch fieldNum {
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *FieldType) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		switch fieldNum {
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *LogEventType) ProtoSize() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RowsEventVersion) ProtoSize() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChecksumAlgorithm) ProtoSize() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryStatusCode) ProtoSize() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SqlMode) ProtoSize() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FieldType) ProtoSize() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBinlog(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBinlog(x uint64) (n int) {
	return sovBinlog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogEventType) Marshal() (data []byte, err error) {
	size := m.ProtoSize()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LogEventType) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RowsEventVersion) Marshal() (data []byte, err error) {
	size := m.ProtoSize()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RowsEventVersion) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChecksumAlgorithm) Marshal() (data []byte, err error) {
	size := m.ProtoSize()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ChecksumAlgorithm) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *QueryStatusCode) Marshal() (data []byte, err error) {
	size := m.ProtoSize()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *QueryStatusCode) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SqlMode) Marshal() (data []byte, err error) {
	size := m.ProtoSize()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SqlMode) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FieldType) Marshal() (data []byte, err error) {
	size := m.ProtoSize()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FieldType) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Binlog(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Binlog(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBinlog(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
